import Navbar from "@/components/Navbar";
import { NextAuthWrapper } from "@/components/NextAuthWrapper";
import VerificationBanner from "@/components/VerificationBanner";
import { authOptions } from "@/lib/auth";
import type { Metadata } from "next";
import { getServerSession } from "next-auth";
import { Geist, Geist_Mono } from "next/font/google";
import { headers } from "next/headers";
import { redirect } from "next/navigation";
import { Toaster } from "sonner";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const headersList = await headers();
  const pathname = headersList.get("x-url") || "/";

  console.log("Current pathname:", pathname);


  const session = await getServerSession(authOptions);

  console.log("session LAYOUT :: ", session);

  const isProtectedRoute = pathname?.includes("dashboard") || pathname?.includes("setup-organisation") || pathname?.includes("chatbot-integration") || pathname?.includes("verify-email");
  const isAuthRoute = pathname?.includes("login") || pathname?.includes("register");

  // If no session, redirect to login page
  if (!session && isProtectedRoute) {
    console.log("hello 21");
     redirect("/login");
  }


 

  // If the user is inactive, redirect to verify-email page
  if (session?.user && !session?.user.isActive && !pathname?.includes("verify-email")) {
    console.log("hello 22");
     redirect("/verify-email");
  }

  if (session?.user && session?.user.isActive && pathname?.includes("verify-email")) {
    console.log("hello 23");
     redirect("/chatbot-integration");
  }

  if(session && isAuthRoute){
    console.log("hello 20");
    redirect("/chatbot-integration");
  }

  console.log("hello 24");

  // If user is active, proceed to chatbot-integration
  // if (session.user && session.user.isActive) {
  //   return redirect("/chatbot-integration");
  // }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navbar />
        {
          !isAuthRoute && !pathname?.includes("verify-email") && <VerificationBanner isActive={session?.user.isActive || false} />
        }
        <NextAuthWrapper>
        <>
        {children}
        <Toaster richColors position="top-center" duration={2000} />
        </>
        </NextAuthWrapper>
      </body>
    </html>
  );
}
